From be5a9b2983399e36c5cca7fc3db433501fdf1a78 Mon Sep 17 00:00:00 2001
From: Maria <masha.burdugova@mail.ru>
Date: Sat, 23 Mar 2024 21:32:13 +0000
Subject: [PATCH 4/4] fixed bugs

---
 20240318/1/Pipfile      | 12 +++++++++
 20240318/1/Pipfile.lock | 30 ++++++++++++++++++++++
 20240318/1/server.py    | 55 +++++++++--------------------------------
 3 files changed, 54 insertions(+), 43 deletions(-)
 create mode 100644 20240318/1/Pipfile
 create mode 100644 20240318/1/Pipfile.lock

diff --git a/20240318/1/Pipfile b/20240318/1/Pipfile
new file mode 100644
index 0000000..9ee1575
--- /dev/null
+++ b/20240318/1/Pipfile
@@ -0,0 +1,12 @@
+[[source]]
+url = "https://pypi.org/simple"
+verify_ssl = true
+name = "pypi"
+
+[packages]
+python-cowsay = "*"
+
+[dev-packages]
+
+[requires]
+python_version = "3.11"
diff --git a/20240318/1/Pipfile.lock b/20240318/1/Pipfile.lock
new file mode 100644
index 0000000..a94db2b
--- /dev/null
+++ b/20240318/1/Pipfile.lock
@@ -0,0 +1,30 @@
+{
+    "_meta": {
+        "hash": {
+            "sha256": "8fe857e6e1ea809f29ec27440bc2a7536776c6415183cf92bf49ff40bdb7c0d5"
+        },
+        "pipfile-spec": 6,
+        "requires": {
+            "python_version": "3.11"
+        },
+        "sources": [
+            {
+                "name": "pypi",
+                "url": "https://pypi.org/simple",
+                "verify_ssl": true
+            }
+        ]
+    },
+    "default": {
+        "python-cowsay": {
+            "hashes": [
+                "sha256:69aa91072e36ff27ceb8261718323c9ab275b3470b2260841c5b9ad5d83e8ff3",
+                "sha256:eae49ea3abc00dba38f166e92f2e8f103a75182a944eb7b79aab5b515ca0363d"
+            ],
+            "index": "pypi",
+            "markers": "python_version >= '3.8'",
+            "version": "==1.2.0"
+        }
+    },
+    "develop": {}
+}
diff --git a/20240318/1/server.py b/20240318/1/server.py
index 675e241..4153a57 100644
--- a/20240318/1/server.py
+++ b/20240318/1/server.py
@@ -1,5 +1,10 @@
 import socket
 import threading
+import cmd
+import cowsay
+import shlex
+import sys
+import io
 
 class Server:
     def __init__(self, host='localhost', port=12345):
@@ -24,48 +29,10 @@ class Server:
                 break
             command, *args = data.decode().split()
             response = self.execute_command(command, args)
-            client.sendall(response.encode())
+            if response is not None:  # Check if response is not None before sending
+                client.sendall(response.encode())
 
-    def execute_command(self, command, args):
-        if command == 'move':
-            dx, dy = map(int, args)
-            return self.game_state.move(dx, dy)
-        elif command == 'addmon':
-            name, x, y, hello, hp = args
-            return self.game_state.addmon(name, int(x), int(y), hello, int(hp))
-        elif command == 'attack':
-            weapon = args[0]
-            return self.game_state.attack(weapon)
-        else:
-            return "Unknown command"
-
-import socket
-import threading
-
-class Server:
-    def __init__(self, host='localhost', port=12345):
-        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
-        self.server.bind((host, port))
-        self.server.listen(1)
-        self.clients = []
-        self.game_state = GameState()
-
-    def start(self):
-        print("Server started")
-        while True:
-            client, addr = self.server.accept()
-            print(f"Connected by {addr}")
-            self.clients.append(client)
-            threading.Thread(target=self.handle_client, args=(client,)).start()
-
-    def handle_client(self, client):
-        while True:
-            data = client.recv(1024)
-            if not data:
-                break
-            command, *args = data.decode().split()
-            response = self.execute_command(command, args)
-            client.sendall(response.encode())
+    
 
     def execute_command(self, command, args):
         if command == 'move':
@@ -80,6 +47,7 @@ class Server:
         else:
             return "Unknown command"
 
+
 class GameState:
     def __init__(self):
         self.squares = [[0 for _ in range(10)] for _ in range(10)]  
@@ -93,15 +61,16 @@ class GameState:
         return f"Player moved to position ({new_x}, {new_y})"
 
     def addmon(self, name, x, y, hello, hp):
-        if self.matrix.get((x, y)) is not None:
+        if self.monsters.get((x, y)) is not None:
             print("Replaced the old monster")
 
         if name in cowsay.list_cows() + ["jgsbat"]:
-            self.matrix[(x, y)] = Monster(name, hello, hp)
+            self.monsters[(x, y)] = Monster(name, hello, hp)
             print(f"Added monster {name} to ({x}, {y}) saying {hello} hp {int(hp)}")
         else:
             print("Cannot add unknown monster")
 
+
     def attack(self, weapon):
         for pos, monster in self.monsters.items():
             if weapon == "sword":
-- 
2.44.0

